ANA

Hi Fabio,

A few issues in the abstract:

---

-- I think it is better to emphasize how large "huge" is, and to clearly
say that this is how often the kernel is invoked:

"Since the domain can be extremely large, the kernel will be executed up
to XXX times. Therefore, the efficiency of the kernel is fundamental
*for the overall performance of the FEM solver*."

-- You did not mention optimizations yet, so I think it's better to
first say there are opportunities for optimizations, but they are
difficult to automate; also - are you sure you want to mention
automation? I think here you want to state that there are many and it is
difficult to choose, like you say in the following paragraph. The
automation is a second concern, isn't it?

>>> Agree: automation is a second concern, dropping it

-- also, make sure that "small problem sizes" does not seem
contradictory to "huge domain" - it is unclear what the problem size is
here.

>>> Yep

-- why do you want a "single/unique" sequence of transformations? I mean
- to me, it sounds like you want to point out that such a
"one-size-fits-all" solution doesn't exist, and "a specific sequence of
transformations must be determined for each case".

"Achieving high efficiency for a kernel is no longer a matter of
applying one single optimization, but requires specific sequences of
transformations. Even if an affine loop nest can be generally
distinguished, *particular problem sizes* and/or the complexity of the
mathematical expressions make it difficult to (automatically) determine
the sequence of transformations that leads to the highest performance."

-- having introduced the problem, "Therefore" might be more appropriate
here; the rest is very strong, I find.

>>> I could use it, i'll think about it. Yes, I like it, I think I'm gonna take it

*Therefore*, we present the design and systematic evaluation of COFFEE,
a domain-specific compiler for local assembly kernels.
COFFEE manipulates abstract syntax trees by introducing \emph{composable
optimizations} aimed at improving instruction-level parallelism, SIMD
vectorization, and register locality.
COFFEE generates optimized C code (often including vector intrinsics).

-- I usually like this in a different tone, first person and stronger.
Also, it is better to close the loop to the solver.

We have tested the performance of COFFEE with an extensive set of
experiments, based on XXX real-world examples (from xxx equations and 4
problem sizes) and 2 architectures (... and ...). Our results show that
an average kernel performance improvement of as much as ...%, which can
save XXX mins/hours for the entire FEM solver.

>>> Not that easy, I stopped the calculations after the assembly...


---

More details on the paper follow tomorrow. BTW, I am not at TUDelft,
officially, but "Informatics Institute, University of Amsterdam, The
Netherlands".

Regards,
Ana


===================================================================================================

FLORIAN

Since you put me on there as 2nd author I definitely own you some
contribution. Here's some thoughts for the abstract:

The finite element method is widely employed to approximate solutions of
partial differential equations. Its local assembly operation, in which a
problem-specific kernel is applied to all elements of the discretized
domain, makes it amenable to parallelization. Executing these kernels
efficiently is fundamental when solving very large problems. 

>>> Misleading: the kernel themselves should be efficient - I mean, that's
what the paper is about - not just the scheduler.

Automating their optimization is, however, a challenging issue. Even though these
kernels generally contain affine loop nests, short loop lengths and the
complexity of mathematical expressions make it hard to determine a
single or unique sequence of successful [successive?] transformations.

>>> Taking this re-wording

In this context, we present the design and systematic evaluation of
COFFEE, a domain-specific compiler for local assembly kernels. COFFEE
manipulates abstract syntax trees by introducing composable
optimizations [what makes them composable?] aimed at improving
instruction-level parallelism, in particular SIMD vectorization, and
register locality. It then generates C code using vector intrinsics.
Systematic performance evaluation using a suite of real-world examples
[really?] demonstrates significant speed-ups [over?].

This is without having read the paper. More to follow at a later time.


===================================================================================================

Hi Fabio,

First a couple of trivial name things. My publication name is David A. Ham and you need to give Department of Mathematics for me as well as DoC.

>>> Done

I've taken the liberty of suggesting a rewording of the numerics bit at the start of the abstract:

Numerical solution of partial differential equations using the 
finite element method is one of the key applications of high 
performance computing. Its characteristic operation is the local 
assembly of linear and bilinear forms by  executing a problem-
specific kernel for each element in the discretized problem domain.

>>> OK, but dropping "linear/bilinear form" that might tell nothing to most of the reviewers

You need the word "the" before design.

Significant is misspelt in the last line of the abstract.

consider ending with "significant performance increases are achieved". I think that is more formal than "speed-ups" and I think you can use "achieved" which is stronger than "achievable".

I'll look over the rest of the paper later, but I appreciate that the abstract is most critical right now.

Regards,

David


